import { Telegraf } from 'telegraf'

import { formatPrice, validateUrl } from '../utils/helpers'

import type { ProductAnalytics, User } from '../types/index'
import type { Context } from 'telegraf'
import { createLogger } from '../utils/logger'

const logger = createLogger('BotService')

export interface TelegramBotDependencies {
  addUser: (chatId: string) => Promise<void>
  clearUserProducts: (chatId: string) => Promise<void>
  getProducts: (chatId: string) => Promise<ProductAnalytics[]>
  getReport: (chatId: string) => string
  getUser: (chatId: string) => Promise<null | User>
  setActive: (chatId: string, isActive: boolean) => Promise<void>
  setFavoriteList: (chatId: string, url: string) => Promise<string>
  stop: (chatId: string) => Promise<void>
}

export class TelegramBot {
  private batchSize: number
  private bot: Telegraf
  private dependencies: TelegramBotDependencies
  private isRunning = false

  static readonly ITEM_SEPARATOR = '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'

  constructor(
    token: string,
    dependencies: TelegramBotDependencies,
    batchSize?: number,
  ) {
    logger.info('Bot service constructor')
    if (!token) {
      throw new Error('Telegram bot token is required')
    }

    this.bot = new Telegraf(token)

    this.batchSize = batchSize || 10
    this.dependencies = dependencies
  }

  async canActivate(ctx: Context) {
    try {
      if (!ctx.chat) {
        throw new Error('Chat not found')
      }

      const user = await this.dependencies.getUser(ctx.chat.id.toString())

      return Boolean(user) && user?.isActive
    }
    catch (error) {
      logger.error('Failed to check if user exists:', error)

      await ctx.reply('User not found')

      return false
    }
  }

  async initCommands(): Promise<void> {
    this.bot.command('start', async (ctx) => {
      const userId = ctx.chat.id
      await this.dependencies.addUser(userId.toString())

      const activateCommand = `/activate ${userId}`

      const welcomeMessage = [
        '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞* ü§ñ',
        '',
        `–í–∞—à ID: \`${userId}\``,
        '',
        '*–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥:*',
        '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è.',
        '',
        '*–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É:*',
        `\`${activateCommand}\``,
      ].join('\n')

      await ctx.reply(welcomeMessage, {
        parse_mode: 'Markdown',
      })
    })

    this.bot.command('getid', (ctx) => {
      const chatId = ctx.chat.id
      ctx.reply(`–í–∞—à —Ç–µ–∫—É—â–∏–π ID: ${chatId}`)
    })

    this.bot.command('getall', async (ctx) => {
      if (!await this.canActivate(ctx)) {
        ctx.reply('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')

        return
      }

      const products = await this.dependencies.getProducts(ctx.chat.id.toString())
      if (products.length === 0) {
        ctx.reply('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

        return
      }

      await this.sendNotifications([ctx.chat.id.toString()], products, this.batchSize)
    })

    this.bot.command('addlist', async (ctx) => {
      if (!await this.canActivate(ctx)) {
        return
      }

      const [, url] = ctx.message.text.split(' ')
      if (!validateUrl(url)) {
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: https://ozon.ru/t/QweRtY', {
          link_preview_options: {
            is_disabled: true,
          },
        })

        return
      }

      const listId = await this.dependencies.setFavoriteList(ctx.chat.id.toString(), url)
      ctx.reply(`–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω: ${listId} \n\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: https://www.ozon.ru/my/favorites/shared?list=${listId}`)
    })

    this.bot.command('activate', async (ctx) => {
      if (!await this.canActivate(ctx)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

        return
      }

      const [, userId] = ctx.message.text.split(' ')
      if (!userId) {
        await ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä: /activate 123456789')

        return
      }

      const user = await this.dependencies.getUser(userId)
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

        return
      }

      try {
        await this.dependencies.setActive(userId, true)

        // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const activatedUserMessage = [
          'üéâ *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*',
          '',
          'üìù –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:',
          '',
          '1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ OZON',
          '2. –ó–∞–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
          '3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"',
          '4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É (—Ñ–æ—Ä–º–∞—Ç: ozon.ru/t/XXXXXX)',
          '5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addlist',
          '',
          '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*',
          '',
          'üìã */addlist* - –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
          'üîç */getall* - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã',
          '‚èπÔ∏è */stop* - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞',
          'üÜî */getid* - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID',
          '',
          '*–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:*',
          '`/addlist https://ozon.ru/t/QweRtY`',
          '',
          '‚ùóÔ∏è –í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"',
          '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ozon.ru/t/QweRtY',
          '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: ozon.ru/product/...',
        ].join('\n')

        await this.bot.telegram.sendMessage(userId, activatedUserMessage, {
          parse_mode: 'Markdown',
        })

        // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.reply(`‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`)
      }
      catch (error) {
        logger.error(`Failed to activate user ${userId}:`, error)
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
      }
    })

    this.bot.command('stop', async (ctx) => {
      if (!await this.canActivate(ctx)) {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è')

        return
      }

      await this.dependencies.stop(ctx.chat.id.toString())
      ctx.reply('üõë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    })

    this.bot.command('report', async (ctx) => {
      const chatId = ctx.chat.id.toString()

      const report = this.dependencies.getReport(chatId)
      await ctx.reply(report)
    })
  }

  async init(): Promise<void> {
    try {
      logger.info('Starting Telegram bot')

      await this.initCommands()

      this.bot.launch(() => {
        this.isRunning = true
        logger.info('Telegram bot started')
      })
        .catch((error) => {
          logger.error('Failed to start Telegram bot:', error)
          this.isRunning = false
        })

      await new Promise((resolve) => {
        return setTimeout(resolve, 2000)
      })
    }
    catch (error) {
      logger.error('Failed to initialize Telegram bot:', error)
      throw error
    }
  }

  async sendAnalytics(chatId: string, analyticsArray: ProductAnalytics[]): Promise<void> {
    if (!this.isRunning) {
      logger.warn('Bot is not running, skipping message')

      return
    }

    await this.sendNotifications([chatId], analyticsArray, this.batchSize)
  }

  async sendNotifications(chatIds: string[], messages: ProductAnalytics[], batchSize: number) {
    for (const chatId of chatIds) {
      try {
        await this.sendBatchedMessages(chatId, messages, batchSize)
      }
      catch (error) {
        logger.error(`Failed to send message to chat ${chatId}:`, error)
      }
    }
  }

  private async sendBatchedMessages(chatId: string, messages: ProductAnalytics[], batchSize: number) {
    for (let i = 0; i < messages.length; i += batchSize) {
      const batch = messages.slice(i, i + batchSize)
      const formattedMessages = batch.map((msg) => {
        return this.formatAnalyticsMessage(msg)
      })
      const messageText = this.formatMessage(formattedMessages, i)

      await this.sendTelegramMessage(chatId, messageText)
    }
  }

  async sendTelegramMessage(chatId: string, text: string) {
    await this.bot.telegram.sendMessage(chatId, text, {
      link_preview_options: { is_disabled: true },
      parse_mode: 'HTML',
    })
  }

  formatMessage(messages: string[], index: number): string {
    const separator = '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'

    return index === 0
      ? `${separator}
      ${messages.join('')}`
      : messages.join('')
  }

  formatPriceChange(change: number): string {
    const absChange = Math.abs(change)
    if (change === 0) {
      return '0%'
    }

    return change > 0 ? `+${absChange}%` : `-${absChange}%`
  }

  private formatAnalyticsMessage(analytics: ProductAnalytics): string {
    const { name, price: currentPrice, url } = analytics.current
    const { price: minPrice } = analytics.minPrice
    const { price: maxPrice } = analytics.maxPrice

    const trend = this.getPriceTrendSymbol(analytics.priceDiffPercent)
    const priceChangeFormatted = this.formatPriceChange(analytics.priceDiffPercent)
    const [productName, ..._args] = name.split(',')

    let inStockText = ``
    if (analytics.becameAvailable) {
      inStockText = 'üîî'
    }
    else if (analytics.becameUnavailable) {
      inStockText = 'üö´'
    }

    return `
${inStockText}<b>${productName}</b>
üíµ <b>${formatPrice(currentPrice)}</b> 
üìà <code>${trend} ${priceChangeFormatted}</code>
‚ÑπÔ∏è Min/Max: <code>${formatPrice(minPrice)}/${formatPrice(maxPrice)}</code>
<a href="${url}">–û—Ç–∫—Ä—ã—Ç—å –≤ Ozon ‚ûú</a>
${TelegramBot.ITEM_SEPARATOR}`
  }

  private getPriceTrendSymbol(priceDiff: number): string {
    if (priceDiff === 0) {
      return '‚Üí'
    }

    return priceDiff > 0 ? '‚Üó' : '‚Üò'
  }

  async stop(): Promise<void> {
    if (this.isRunning) {
      this.bot.stop()
      this.isRunning = false
      logger.info('Telegram bot stopped')
    }
  }

  isReady(): boolean {
    return this.isRunning
  }
}
